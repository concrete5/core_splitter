#!/bin/bash

# Exit immediately if a pipeline, a list, or a compound command, exits with a non-zero status.
set -o errexit
# Any trap on ERR is inherited by shell functions, command substitutions, and commands executed in a subshell environment.
set -o errtrace
# The return value of a pipeline is the value of the last (rightmost) command to exit with a non-zero status, or zero if all commands in the pipeline exit successfully
set -o pipefail
# Treat unset variables and parameters other than the special parameters "@" and "*" as an error when performing parameter expansion.
set -o nounset

echo '# Setup working directory'
WORKDIR="$(pwd)/temp"
mkdir --parents --mode=0770 "${WORKDIR}"

echo '# Waiting previous processes'
exec 9>"${WORKDIR}/lock.file"
WAITLOCK=1
while :; do
	flock --exclusive --timeout 3 9 && WAITLOCK=0 || true
	if [ $WAITLOCK -eq 0 ]; then
		break;
	fi
	echo '... still waiting...'
done

DO_CLONE=1
if [ -f "${WORKDIR}/source/config" ]; then
	echo '# Updating source repository'
	git --git-dir="${WORKDIR}/source" remote update --prune && DO_CLONE=0 || true
fi
if [ $DO_CLONE -eq 1 ]; then
	echo '# Cloning source repository'
	rm -rf "${WORKDIR}/source"
	git clone --no-checkout  --mirror https://github.com/concrete5/concrete5.git "${WORKDIR}/source"
fi

echo '# Creating working repository'
rm -rf "${WORKDIR}/work"
git clone --local --no-checkout --bare "${WORKDIR}/source" "${WORKDIR}/work"

echo '# Filtering commits'
rm -rf "${WORKDIR}/work.filtering"
# Isolate dir1 and recreate branches
# --subdirectory-filter concrete
#	Only look at the history which touches the given subdirectory
# --tag-name-filter cat
#   Update the tags
# --prune-empty
#   Remove commits that leave the tree untouched
# -d <directory>
#	The path to the temporary directory used for rewriting
# -- --all
#	Update all existing references, which is all existing branches
git --git-dir="${WORKDIR}/work" \
	filter-branch \
	--subdirectory-filter concrete \
	--tag-name-filter cat \
	--prune-empty \
	-d "${WORKDIR}/work.filtering" \
	-- --all
rm -rf "${WORKDIR}/work.filtering"

echo '# Pushing branches'
git --git-dir="${WORKDIR}/work" push --all --force git@github.com:concrete5/concrete5-core.git

echo '# Pushing tags'
git --git-dir="${WORKDIR}/work" push --tags --force git@github.com:concrete5/concrete5-core.git

echo '# Cleanup'
rm -rf "${WORKDIR}/work"
